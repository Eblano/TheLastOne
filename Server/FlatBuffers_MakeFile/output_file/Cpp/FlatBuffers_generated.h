// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATBUFFERS_GAME_HYUN_H_
#define FLATBUFFERS_GENERATED_FLATBUFFERS_GAME_HYUN_H_

#include "flatbuffers/flatbuffers.h"

namespace Game {
namespace Hyun {

struct Vec3;

struct Client;

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(const Vec3 &_o) {
    memcpy(this, &_o, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Vec3, 12);

struct Client FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POS = 4,
    VT_ROTATION = 6,
    VT_VIEW = 8
  };
  const Vec3 *pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  const Vec3 *rotation() const {
    return GetStruct<const Vec3 *>(VT_ROTATION);
  }
  const Vec3 *view() const {
    return GetStruct<const Vec3 *>(VT_VIEW);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           VerifyField<Vec3>(verifier, VT_ROTATION) &&
           VerifyField<Vec3>(verifier, VT_VIEW) &&
           verifier.EndTable();
  }
};

struct ClientBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Vec3 *pos) {
    fbb_.AddStruct(Client::VT_POS, pos);
  }
  void add_rotation(const Vec3 *rotation) {
    fbb_.AddStruct(Client::VT_ROTATION, rotation);
  }
  void add_view(const Vec3 *view) {
    fbb_.AddStruct(Client::VT_VIEW, view);
  }
  ClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ClientBuilder &operator=(const ClientBuilder &);
  flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline flatbuffers::Offset<Client> CreateClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    const Vec3 *rotation = 0,
    const Vec3 *view = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_view(view);
  builder_.add_rotation(rotation);
  builder_.add_pos(pos);
  return builder_.Finish();
}

}  // namespace Hyun
}  // namespace Game

#endif  // FLATBUFFERS_GENERATED_FLATBUFFERS_GAME_HYUN_H_
