// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Game.TheLastOne
{

using global::System;
using global::FlatBuffers;

public struct GameDangerLine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GameDangerLine GetRootAsGameDangerLine(ByteBuffer _bb) { return GetRootAsGameDangerLine(_bb, new GameDangerLine()); }
  public static GameDangerLine GetRootAsGameDangerLine(ByteBuffer _bb, GameDangerLine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GameDangerLine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Demage { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Vec3? Position { get { int o = __p.__offset(6); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vec3? Scale { get { int o = __p.__offset(8); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartGameDangerLine(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddDemage(FlatBufferBuilder builder, int demage) { builder.AddInt(0, demage, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vec3> positionOffset) { builder.AddStruct(1, positionOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, Offset<Vec3> scaleOffset) { builder.AddStruct(2, scaleOffset.Value, 0); }
  public static Offset<GameDangerLine> EndGameDangerLine(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameDangerLine>(o);
  }
};


}
